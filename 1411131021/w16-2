//square_rect(main).cpp
#include<iostream>

#include<stdexcept>

#include"pie_2D.h"

#include"cylinder_3D.h"

using namespace std;

int main(void) {

    double length;

    double width;

    double height;

    //視窗輸出配置

    cout << "Enter the length and width for square：" << endl;

    cout << "  Length=";

    cin >> length;



    cout << "  Width =";

    cin >> width;

    pie_2D userenter(length, width);

    cout << "-------------------------------------------------" << endl;



    cout << "Enter the height for rect:" << endl;

    cout << "  Height=";

    cin >> height;

    cylinder_3D userenter2(length, width, height);

    cout << "-------------------------------------------------" << endl;

    cout << "The result is:\n\n";

    cout << "  The result of square:\n";

    cout << "     Length：" << userenter.getlength() << " cm" << " | Width："

        << userenter.getwidth() << " cm" << "\n     The area is "

        << userenter.compute_area() << " cm2\n" << endl;

    cout << "  The result of rect:\n";

    cout << "     Length：" << userenter2.getlength() << " cm" << " | Width："

        << userenter2.getwidth() << " cm" << " | Height：" << userenter2.getheight()

        << " cm" << "\n     The volume is " << userenter2.compute_volume() << " cm3 | The surface is " << userenter2.compute_surface() << " cm2\n" << endl;



    system("pause");

}


//pie_2D.h
/*這次程式的重點就是在運用類別的「繼承(inherit)」關係*/

/*「繼承」的定義->先定義基礎類別(base class)，可以依據定義的基礎類別，再定義一個包含基礎類別內的運算子.函數等，且可以再賦予新函數與運算子的衍生類別(derived class)*/

/*例如本題就是利用square_2D當作基礎類別，再自行定義一個rect_3D的衍生類別*/

#ifndef square2d_H

#define square2d_H

using namespace std;

//square_2d的類別(包含6個成員函數與2個資料成員)

class pie_2D {

public:

    pie_2D(double = 0, double = 0);           //建構子

    void setlength(const double);           //設定長度

    void setwidth(const double);            //設定寬度

    double getlength();                     //取得長度   

    double getwidth();                      //取得寬度   

    double compute_area() const;            //計算面積

    double length;                          //長

    double width;                           //寬

};

#endif


//pie_2D.cpp
#include<iostream>

#include<stdexcept>

#include"pie_2D.h"

using namespace std;

pie_2D::pie_2D(const double l, const double w)

{

    setlength(l);

    setwidth(w);

}

void pie_2D::setlength(const double l) {

    length = l;

}

void pie_2D::setwidth(const double w) {

    width = w;

}

double pie_2D::getlength() {

    return length;

}

double pie_2D::getwidth() {

    return width;

}

//面積計算：長*寬

double pie_2D::compute_area() const {

    return length * width;

}


//cylinder_3D.h
#ifndef square3d_H

#define square3d_H

#include"pie_2D.h"

using namespace std;

/*繼承類別的宣告方法為「衍生類別：基礎類別」*/

//繼承square_2d類別的rect_3d類別(包含5個成員函數與1個資料成員 + square_2d內的函數與資料成員)

class cylinder_3D :public pie_2D

{

public:

    cylinder_3D(double = 0, double = 0, double = 0);            //建構子

    void setheight(const double);                           //設定高度

    double getheight();                                     //取得高度   

    double compute_volume() const;                          //計算體積

    double compute_surface() const;                         //計算表面積

    double height;                                          //高

};

#endif


//cylinder_3D.cpp
#include<iostream>

#include<stdexcept>

#include"cylinder_3D.h"

using namespace std;

cylinder_3D::cylinder_3D(double l, double w, double h)

{

    setlength(l);

    setwidth(w);

    setheight(h);

}

void cylinder_3D::setheight(const double h) {

    height = h;

}

double cylinder_3D::getheight() {

    return height;

}

//體積計算：長*寬*高

double cylinder_3D::compute_volume() const {

    return length * width * height;

}

//表面積計算：(長*寬+寬*高+長*高)*2

double cylinder_3D::compute_surface() const {

    return (length * width + width * height + length * height) * 2;

}
