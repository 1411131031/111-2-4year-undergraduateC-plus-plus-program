// 主程式
// Fig. 9.21: fig9_21.cpp
// Demonstrating composition--an object with member objects.
#include <iostream>
#include <string>
#include "Pet.h" // Employee class definition
using namespace std;

int main()
{
	string type, Name;
	Date birth(7, 24, 1949);
	Date adopt(3, 12, 1988);
	Date today(12,6,2023);
	cout << "input today month day and year" << endl;
	cin >> today.month >> today.day >> today.year;
	cout << "input pet birthday month day and year"<<endl;
	cin >> birth.month >> birth.day >> birth.year;
	cout << "input pet adpot month day and year" << endl;
	cin >> adopt.month >> adopt.day >> adopt.year;
	cout << "input pet type and name" << endl;
	cin >> type >> Name;
	Employee manager(type, Name, birth, adopt,today);
	cout << endl;
	
} // end main

/**************************************************************************
 * (C) Copyright 1992-2012 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 **************************************************************************/



// 寵物介面檔 Pet.h
// Fig. 9.19: Employee.h
// Employee class definition showing composition.
// Member functions defined in Employee.cpp.
#ifndef EMPLOYEE_H
#define EMPLOYEE_H

#include <string>
#include "Date.h" // include Date class definition

class Employee
{
public:
    Employee(const std::string&, const std::string&,
        const Date&, const Date&, const Date&);
    void print() const;
    void age(const Date&, const Date&);
    ~Employee(); // provided to confirm destruction order
    void chenkDay(const Date&, const Date&, const Date&);
    std::string type; // composition: member object
    std::string Name; // composition: member object
    const Date birthDate; // composition: member object
    const Date adoptDate; // composition: member object
    const Date today;
}; // end class Employee

#endif

/**************************************************************************
 * (C) Copyright 1992-2012 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 **************************************************************************/




// 寵物實作檔 Pet.cpp
// Fig. 9.20: Employee.cpp
// Employee class member-function definitions.
#include <iostream>
#include "Pet.h" // Employee class definition
#include "Date.h" // Date class definition
using namespace std;

// constructor uses member initializer list to pass initializer 
// values to constructors of member objects  
Employee::Employee(const string& first, const string& last,
    const Date& dateOfBirth, const Date& dateOfadopt, const Date& dateoftoday)
    : type(first), // initialize firstName
    Name(last), // initialize lastName
    birthDate(dateOfBirth), // initialize birthDate
    adoptDate(dateOfadopt), // initialize hireDate
    today(dateoftoday)
{
    // output Employee object to show when constructor is called
    cout << "Employee object constructor: "
        << type << ' ' << Name << endl;
} // end Employee constructor
void Employee::chenkDay(const Date& dateOfBirth, const Date& dateOfadopt, const Date& dateoftoday)
{
    if (dateoftoday.year - dateOfBirth.year>20)
    {
        cout << "不符合規則，狗不會超過20歲" << endl;
    }
    else cout << "年齡正確" << endl;
        
    if (dateOfBirth.year > dateOfadopt.year)
    {
        cout << "不符合規則，生日大於領養日"<<endl;
    }
    else if (dateOfBirth.month > dateOfadopt.month)
    {
        cout << "不符合規則，生日大於領養日" << endl;
    }
    else if (dateOfBirth.day > dateOfadopt.day)
    {
        cout << "不符合規則，生日大於領養日" << endl;
    }
    else
    {
        cout << "符合規則"<<endl;
    }


}
// print Employee object
void Employee::print() const
{
    cout << type << ", " << Name << "   adoptDate: ";
    adoptDate.print();
    cout << "  Birthday: ";
    birthDate.print();
    cout << endl;
} // end function print
void Employee::age(const Date& dateOfBirth, const Date& today)
{
    cout << today.year - dateOfBirth.year<<endl;
}
// output Employee object to show when its destructor is called
Employee::~Employee()
{
    cout << type << ", " << Name << "   adoptDate: ";
    adoptDate.print();
    cout << "  Birthday: ";
    birthDate.print();
    cout <<"目前年齡" ;
    age(birthDate,today);
    chenkDay(birthDate, adoptDate,today);
    cout << endl;
   

} // end ~Employee destructor

/**************************************************************************
 * (C) Copyright 1992-2012 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 **************************************************************************/


// 日期介面檔 Date.h 
// Fig. 9.17: Date.h 
// Date class definition; Member functions defined in Date.cpp
#ifndef DATE_H
#define DATE_H

class Date
{
public:
	static const unsigned int monthsPerYear = 12; // months in a year
	explicit Date(int = 1, int = 1, int = 1900); // default constructor
	void print() const; // print date in month/day/year format
	~Date(); // provided to confirm destruction order
	
	unsigned int month; // 1-12 (January-December)
	unsigned int day; // 1-31 based on month
	unsigned int year; // any year

	// utility function to check if day is proper for month and year
	unsigned int checkDay(int) const;
}; // end class Date

#endif

/**************************************************************************
 * (C) Copyright 1992-2012 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 **************************************************************************/




// 日期實作檔  Date.cpp
// Fig. 9.18: Date.cpp
// Date class member-function definitions.
#include <array>
#include <iostream>
#include <stdexcept>
#include "Date.h" // include Date class definition
#include "Pet.h"
using namespace std;

// constructor confirms proper value for month; calls
// utility function checkDay to confirm proper value for day
Date::Date(int mn, int dy, int yr)
{
    if (mn > 0 && mn <= monthsPerYear) // validate the month
        month = mn;
    else
        throw invalid_argument("month must be 1-12");
    
    year = yr; // could validate yr
    day = checkDay(dy); // validate the day

    // output Date object to show when its constructor is called
    cout << "Date object constructor for date ";
    print();
    cout << endl;
} // end Date constructor

// print Date object in form month/day/year
void Date::print() const
{
    cout << month << '/' << day << '/' << year;
} // end function print


// output Date object to show when its destructor is called
Date::~Date()
{
    cout << "Date object destructor for date ";
    print();
    cout << endl;
} // end ~Date destructor

// utility function to confirm proper day value based on 
// month and year; handles leap years, too
unsigned int Date::checkDay(int testDay) const
{
    static const array< int, monthsPerYear + 1 > daysPerMonth =
    { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    // determine whether testDay is valid for specified month
    if (testDay > 0 && testDay <= daysPerMonth[month])
        return testDay;

    // February 29 check for leap year 
    if (month == 2 && testDay == 29 && (year % 400 == 0 ||
        (year % 4 == 0 && year % 100 != 0)))
        return testDay;

    throw invalid_argument("Invalid day for current month and year");

} // end function checkDay

/**************************************************************************
 * (C) Copyright 1992-2012 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 **************************************************************************/
