#include<iostream>

#include<stdexcept>

#include"pie_2D.h"

#include"cylinder_3D.h"

using namespace std;

int main(void) {

    double radius;



    double height;

    //視窗輸出配置

    cout << "Enter the length and width for pie：" << endl;

    cout << "  R=";

    cin >> radius;



    cout << "  Width =3.14";



    square_2d userenter(radius);

    cout << "-------------------------------------------------" << endl;



    cout << "Enter the height for cylinder:" << endl;

    cout << "  Height=";

    cin >> height;

    rect_3d userenter2(radius , height);

    cout << "-------------------------------------------------" << endl;

    cout << "The result is:\n\n";

    cout << "  The result of pie:\n";

    cout << "     radius：" << userenter.getlength() << " cm" << " | Width："

        << userenter.getwidth() << " cm" << "\n     The area is "

        << userenter.compute_area() << " cm2\n" << endl;

    cout << "  The result of cylinder:\n";

    cout << "     radius：" << userenter2.getlength() << " cm" << " | Width："

        << userenter2.getwidth() << " cm" << " | Height：" << userenter2.getheight()

        << " cm" << "\n     The volume is " << userenter2.compute_volume()  <<" cm3 | The surface is " << userenter2.compute_surface() << " cm2\n" << endl;



    system("pause");

}


-----------------------------

#include<iostream>

#include<stdexcept>

#include"cylinder_3D.h"

using namespace std;

rect_3d::rect_3d(double r, double h)

{

    setlength(r);


    setheight(h);

}

void rect_3d::setheight(const double h) {

    height = h;

}

double rect_3d::getheight() {

    return height;

}

//體積計算：長*寬*高

double rect_3d::compute_volume() const {

    return radius* radius * width * height;

}

//表面積計算：(長*寬+寬*高+長*高)*2

double rect_3d::compute_surface() const {

    return  radius * radius * width+ radius *2*width* height;

}
-----------------------------
#ifndef square3d_H

#define square3d_H

#include"pie_2D.h"

using namespace std;

/*繼承類別的宣告方法為「衍生類別：基礎類別」*/

//繼承square_2d類別的rect_3d類別(包含5個成員函數與1個資料成員 + square_2d內的函數與資料成員)

class rect_3d :public square_2d

{

public:

    rect_3d(double = 0, double = 0);            //建構子

    void setheight(const double);                           //設定高度

    double getheight();                                     //取得高度   

    double compute_volume() const;                          //計算體積

    double compute_surface() const;                         //計算表面積

    double height;                                          //高

};

#endif
--------------------------------
#include<iostream>

#include<stdexcept>

#include"pie_2D.h"

using namespace std;

square_2d::square_2d(const double r)

{

    setlength(r);

 

}

void square_2d::setlength(const double r){

    radius = r;

}

void square_2d::setwidth(const double w){

    width = w;

}

double square_2d::getlength(){

    return radius;

}

double square_2d::getwidth(){

    return width;

}

//面積計算：長*寬

double square_2d::compute_area() const{

    return radius *radius *width;

}
--------------------------------------------------------------
#ifndef square2d_H

#define square2d_H

using namespace std;

//square_2d的類別(包含6個成員函數與2個資料成員)

class square_2d{

public:

    square_2d(double=0);           //建構子

    void setlength(const double);           //設定長度

    void setwidth(const double);            //設定寬度

    double getlength();                     //取得長度   

    double getwidth();                      //取得寬度   

    double compute_area() const;            //計算面積

    double radius;                          //長

    double width=3.14;                           //寬

};

#endif
