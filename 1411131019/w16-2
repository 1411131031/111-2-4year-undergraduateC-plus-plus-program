//main.cpp

#include <iostream>
#include <iomanip>
#include "BasePlusCommissionEmployee.h"                                             //引入有底薪的介面檔
using namespace std;

int main()
{
    BasePlusCommissionEmployee employee("Bob", "Lewis", "333-33-3333", 5000, .04, 300,1000);//根據有底薪的BasePlusCommissionEmployee類別建立employee物件
                                                                                       //並給建構子初始值(姓、名、id、銷售總額、抽成率、底薪)

    cout << fixed << setprecision(2);         //？？

    cout << "Employee information obtained by get functions: \n"                       //列印預設的姓、名、id、銷售總額、抽成率、底薪
        << "\nFirst name is " << employee.getFirstName()
        << "\nLast name is " << employee.getLastName()
        << "\nSocial security number is "<< employee.getSocialSecurityNumber()
        << "\nGross sales is " << employee.getGrossSales()
        << "\nCommission rate is " << employee.getCommissionRate()
        << "\nBase salary is " << employee.getBaseSalary() << endl;

    employee.setBaseSalary(1000);           //設定員工底薪為1000

    cout << "\nUpdated employee information output by print function: \n"<< endl;        //更新完員工資料後
    employee.print();                                                                    //利用employee物件中的print功能列印新的結果
    cout << "\n\nEmployee's earnings: $" << employee.earnings() << endl;                 //印出員工最後賺得金額
}


//CommissionEmployee.h

#ifndef COMMISSION_H
#define COMMISSION_H

#include <string> 

class CommissionEmployee
{
public:
    CommissionEmployee(const std::string&, const std::string&,          //建構子存放預設(姓、名、id、銷售總額、抽成率)
        const std::string&, double = 0.0, double = 0.0);

    void setFirstName(const std::string&);          //存、取姓
    std::string getFirstName() const; 

    void setLastName(const std::string&);           //存、取名
    std::string getLastName() const; 

    void setSocialSecurityNumber(const std::string&);   //存、取id
    std::string getSocialSecurityNumber() const; 

    void setGrossSales(double);                 //存、取銷售總額
    double getGrossSales() const; 

    void setCommissionRate(double);             //存、取抽成率
    double getCommissionRate() const; 

    double earnings() const;                //計算員工所得薪資
    void print() const;                     //列印員工所有資料
protected:
    std::string firstName;                  //姓
    std::string lastName;                   //名
    std::string socialSecurityNumber;       //id
    double grossSales;                      //銷售總額
    double commissionRate;                  //抽成率
};

#endif



//CommissionEmployee.cpp


#include <iostream>
#include <stdexcept>
#include "CommissionEmployee.h"
using namespace std;


CommissionEmployee::CommissionEmployee(
    const string& first, const string& last, const string& ssn,
    double sales, double rate)
{
    firstName = first;                  //將預設資料存進私有成員內
    lastName = last; 
    socialSecurityNumber = ssn; 
    setGrossSales(sales); 
    setCommissionRate(rate); 
} 


void CommissionEmployee::setFirstName(const string& first)
{
    firstName = first; 
}


string CommissionEmployee::getFirstName() const
{
    return firstName;
} 


void CommissionEmployee::setLastName(const string& last)
{
    lastName = last;
}


string CommissionEmployee::getLastName() const
{
    return lastName;
} 


void CommissionEmployee::setSocialSecurityNumber(const string& ssn)
{
    socialSecurityNumber = ssn; 
} 


string CommissionEmployee::getSocialSecurityNumber() const
{
    return socialSecurityNumber;
} 


void CommissionEmployee::setGrossSales(double sales)
{
    if (sales >= 0.0)                                       
        grossSales = sales;
    else
        throw invalid_argument("Gross sales must be >= 0.0");
} 


double CommissionEmployee::getGrossSales() const
{
    return grossSales;
} 


void CommissionEmployee::setCommissionRate(double rate)
{
    if (rate > 0.0 && rate < 1.0)
        commissionRate = rate;
    else
        throw invalid_argument("Commission rate must be > 0.0 and < 1.0");
}


double CommissionEmployee::getCommissionRate() const
{
    return commissionRate;
} 


double CommissionEmployee::earnings() const
{
    return commissionRate * grossSales;
} 


void CommissionEmployee::print() const
{
    cout << "commission employee: " << firstName << ' ' << lastName
        << "\nsocial security number: " << socialSecurityNumber
        << "\ngross sales: " << grossSales
        << "\ncommission rate: " << commissionRate;
} 


//BasePlusCommissionEmployee.h


#ifndef BASEPLUS_H
#define BASEPLUS_H

#include <string> 
#include "CommissionEmployee.h"                                             //引入抽成的介面檔

class BasePlusCommissionEmployee : public CommissionEmployee                //繼承CommissionEmployee類別內容
{
public:
    BasePlusCommissionEmployee(const std::string&, const std::string&,      //建立建構子存放預設資料(姓、名、id、銷售總額、抽成率、底薪、主管加成
        const std::string&, double = 0.0, double = 0.0, double = 0.0, double = 0.0);

    void setBaseSalary(double);         //設定底薪
    double getBaseSalary() const;       //取得底薪

    void setMoney(double);         //設定主管加成
    double getMoney() const;       //取得主管加成

    double earnings() const;            //計算員工所得薪資
    void print() const;                 //列印員工全部資料
private:
    double baseSalary;                  //baseSalary存放員工底薪
    double money;
};

#endif


//BasePlusCommissionEmployee.cpp


#include <iostream>
#include <stdexcept>
#include "BasePlusCommissionEmployee.h"
using namespace std;


BasePlusCommissionEmployee::BasePlusCommissionEmployee(             //建構子存放預設資料(first：姓、last：名、ssn：id、sales：銷售總額、rate：抽成率、salary：底薪
    const string& first, const string& last, const string& ssn,
    double sales, double rate, double salary,double mon)

    : CommissionEmployee(first, last, ssn, sales, rate)
{
    setBaseSalary(salary);
    setMoney(mon);
} 


void BasePlusCommissionEmployee::setBaseSalary(double salary)
{
    if (salary >= 0.0)
        baseSalary = salary;
    else
        throw invalid_argument("Salary must be >= 0.0");
} 

void BasePlusCommissionEmployee::setMoney(double mon)
{
    if (mon >= 0.0)
        money = mon;
    else
        throw invalid_argument("Salary must be >= 0.0");
}

double BasePlusCommissionEmployee::getBaseSalary() const
{
    return baseSalary;
}

double BasePlusCommissionEmployee::getMoney() const
{
    return money;
}

double BasePlusCommissionEmployee::earnings() const
{
 
    return baseSalary + (commissionRate * grossSales)+getMoney();
}


void BasePlusCommissionEmployee::print() const
{

    cout << "base-salaried commission employee: " << firstName << ' '
        << lastName << "\nsocial security number: " << socialSecurityNumber
        << "\ngross sales: " << grossSales
        << "\ncommission rate: " << commissionRate
        << "\nbase salary: " << baseSalary
        << "\n主管加成： " << getMoney();
} 
