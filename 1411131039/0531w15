//main.cpp
#include <iostream>
#include <string> // program uses C++ standard string class
#include "pet.h"
#include "Date.h"

using namespace std;

// function main begins program execution
int main()
{
    string type;
    string name;
    int y, m, d;
    cout << "請輸入寵物種類" << endl;
    getline(cin, type);
    cout << "請輸入寵物名字" << endl;
    getline(cin, name);
    cout << "請輸入寵物生日(西元年,月,日)" << endl;
    cin >> y >> m >> d;
    Date birthday(y,m,d);
    birthday.checkDay(d);
    cout << "請輸入寵物領養日(西元年,月,日)" << endl;
    cin >> y >> m >> d;
    Date adoptDate(y, m, d);
    adoptDate.checkDay(d);
    Pet myPet(type, name, birthday, adoptDate);
    myPet.print();
} // end main

//date.h

#ifndef DATE_H
#define DATE_H

class Date
{
public:
	static const unsigned int monthsPerYear = 12; // months in a year
	explicit Date(int = 1, int = 1, int = 1900); // default constructor
	void print() const; // print date in month/day/year format
	~Date(); // provided to confirm destruction order
//private:
	unsigned int month; // 1-12 (January-December)
	unsigned int day; // 1-31 based on month
	unsigned int year; // any year

	// utility function to check if day is proper for month and year
	unsigned int checkDay(int) const;
}; // end class Date

#endif

//date.cpp

#include <array>
#include <iostream>
#include <stdexcept>
#include "Date.h" // include Date class definition
using namespace std;

// constructor confirms proper value for month; calls
// utility function checkDay to confirm proper value for day
Date::Date(int yr, int mn, int dy)
{
    if (mn > 0 && mn <= monthsPerYear) // validate the month
        month = mn;
    else
        throw invalid_argument("month must be 1-12");

    year = yr; // could validate yr
    day = checkDay(dy); // validate the day

    // output Date object to show when its constructor is called
    cout << "Date object constructor for date ";
    print();
    cout << endl;
} // end Date constructor

// print Date object in form month/day/year
void Date::print() const
{
    cout << month << '/' << day << '/' << year;
} // end function print

// output Date object to show when its destructor is called
Date::~Date()
{
    cout << "Date object destructor for date ";
    print();
    cout << endl;
} // end ~Date destructor

// utility function to confirm proper day value based on 
// month and year; handles leap years, too
unsigned int Date::checkDay(int testDay) const
{
    static const array< int, monthsPerYear + 1 > daysPerMonth =
    { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    // determine whether testDay is valid for specified month
    if (testDay > 0 && testDay <= daysPerMonth[month])
        return testDay;

    // February 29 check for leap year 
    if (month == 2 && testDay == 29 && (year % 400 == 0 ||
        (year % 4 == 0 && year % 100 != 0)))
        return testDay;

    throw invalid_argument("Invalid day for current month and year");
}

//Pet.h
#ifndef EMPLOYEE_H
#define EMPLOYEE_H

#include <string>
#include "Date.h" // include Date class definition

class Pet
{
public:
    Pet(const std::string&, const std::string&,
        const Date&, const Date&);
    void print() const;
    ~Pet(); // provided to confirm destruction order
private:
    std::string type; // composition: member object
    std::string name; // composition: member object
    const Date birthDate; // composition: member object
    const Date adoptDate; // composition: member object
}; // end class Employee

#endif

//pet.cpp
#include <iostream>
#include "Pet.h" // Employee class definition
#include "Date.h" // Date class definition
using namespace std;

// constructor uses member initializer list to pass initializer 
// values to constructors of member objects  
Pet::Pet(const string& Type, const string& Name,const Date& dateOfBirth, const Date& dateOfHire)
    : type(Type),name(Name), // initialize lastName
    birthDate(dateOfBirth), // initialize birthDate
    adoptDate(dateOfHire) // initialize hireDate
{
    // output Employee object to show when constructor is called
    cout << "Pet object constructor: "
        << type << ' ' << name << endl;
} // end Employee constructor

// print Employee object
void Pet::print() const
{
    cout << "種類：" << type << "\n名字：" << name << "\n領養日:";
    adoptDate.print();
    cout << " \n生日:";
    birthDate.print();
    cout << endl;
    if (this->adoptDate.year > this->birthDate.year)
        cout << "領養日日期合理\n" << endl;
    else if((this->adoptDate.year == this->birthDate.year) && (this->adoptDate.month == this->birthDate.month))
        cout << "領養日與生日同天\n" << endl;
    else
        cout << "領養日日期不合理\n" << endl;
} // end function print

// output Employee object to show when its destructor is called
Pet::~Pet()
{
    cout << "種類：" << type << "\n名字：" << name << "\n領養日:";
    adoptDate.print();
    cout << " \n生日:";
    birthDate.print();
    cout << endl;
}
