【main.cpp】
#include <iostream>
#include <stdexcept>
#include "time.h"
using namespace std;

int main()
{
   Date t;

   cout << "The initial date is ";
   t.printUniversal(); //西元年
   cout << "\nThe initial ROCdate is ";
   t.printROC(); //民國年 

   t.setDate( 2004, 4, 18);

   cout << "\n\nUniversal time after setDate is ";
   t.printUniversal();
   cout << "\nStandard time after setDate is ";
   t.printROC();

   try
   {
      t.setDate( 4096, 99, 99 );
   }
   catch ( invalid_argument &e )
   {
      cout << "\n\nException: " << e.what() << endl;
   }

   cout << "\nAfter attempting invalid settings:"
      << "\nUniversal time: ";
   t.printUniversal();
   cout << "\nStandard time: ";
   t.printROC();
   cout << endl;
} 

【time.cpp】
#include <iostream>
#include <iomanip>
#include <stdexcept>
#include "time.h" 

using namespace std;

Date::Date() 
{ 
   year = month = day = 0; 
}

void Date::setDate( int h, int m, int s )
{
   
   if ( ( h >= 0 && h < 3000 ) && ( m >= 0 && m <= 12 ) && 
      ( s >= 0 && s <= 31 ) ) 
   {
      year = h;
      month = m;
      day = s;
   } 
   else
      throw invalid_argument( 
         "year, month and/or day was out of range" );
} 

void Date::printUniversal()
{
   cout << "西元 " << setfill( '0' ) << setw( 4 ) << year << ":" 
      << setw( 2 ) << month << ":" << setw( 2 ) << day;
} 

void Date::printROC()
{
   cout << "民國 " << ( ( year < 200  ) ? year : year - 1911 ) << ":" 
      << setfill( '0' ) << setw( 2 ) << month << ":" << setw( 2 )
      << day;
} 

【time.h】
#ifndef TIME_H
#define TIME_H

class Date 
{
public:
   Date(); 
   void setDate( int, int, int ); 
   void printUniversal(); 
   void printROC(); 
private:
   int year; 
   int month;
   int day; 
};

#endif
